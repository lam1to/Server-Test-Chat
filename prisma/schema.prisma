generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  email         String          @unique
  password      String
  name          String
  lastName      String
  avatarPath    String          @default("https://storage.googleapis.com/img-test-chat/user.png") @map("avatar_path")
  userChats     UserChat[]
  messages      Message[]
  blockUser1    BlockUser[]     @relation("User1")
  blockUser2    BlockUser[]     @relation("User2")
  leftChat      LeftChat[]
  chat          Chat[]
  messageStatus MessageStatus[]
}

model Chat {
  id              Int             @id @default(autoincrement())
  type            String          @default("DM")
  name            String          @default("EmptyName")
  avatarUrl       String          @default("https://storage.googleapis.com/img-test-chat/user.png")
  createdAt       DateTime        @default(now()) @map("created_at")
  userChats       UserChat[]
  messages        Message[]
  leftChat        LeftChat[]
  User            User?           @relation(fields: [userWhoCreateId], references: [id])
  userWhoCreateId Int?
  messageStatus   MessageStatus[]
}

model UserChat {
  id Int @id @default(autoincrement())

  Chat   Chat? @relation(fields: [chatId], references: [id])
  chatId Int?
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Message {
  id              Int              @id @default(autoincrement())
  content         String
  createdAt       DateTime         @default(now()) @map("created_at")
  Chat            Chat?            @relation(fields: [chatId], references: [id])
  chatId          Int?
  User            User?            @relation(fields: [userId], references: [id])
  userId          Int?
  contentImg      ContentImg[]
  replyMessage1   ReplyMessage[]   @relation("Message1")
  replyMessage2   ReplyMessage[]   @relation("Message2")
  forwardMessage1 ForwardMessage[] @relation("ForwardMessage1")
  forwardMessage2 ForwardMessage[] @relation("ForwardMessage2")
  messageStatus   MessageStatus[]
}

model BlockUser {
  id                     Int   @id @default(autoincrement())
  User1                  User? @relation("User1", fields: [user_Who_BlocketId], references: [id])
  user_Who_BlocketId     Int?
  User2                  User? @relation("User2", fields: [user_Who_Was_BlocketId], references: [id])
  user_Who_Was_BlocketId Int?
}

model LeftChat {
  id Int @id @default(autoincrement())

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  Chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    Int?
  createdAt DateTime @default(now()) @map("created_at")
}

model ContentImg {
  id        Int      @id @default(autoincrement())
  Message   Message? @relation(fields: [messageId], references: [id])
  messageId Int?
  image_url String   @default("empty")
}

model ReplyMessage {
  id             Int      @id @default(autoincrement())
  Message1       Message? @relation("Message1", fields: [messageId], references: [id])
  messageId      Int?
  Message2       Message? @relation("Message2", fields: [messageIdReply], references: [id])
  messageIdReply Int?
}

model ForwardMessage {
  id               Int      @id @default(autoincrement())
  ForwardMessage1  Message? @relation("ForwardMessage1", fields: [messageId], references: [id])
  messageId        Int?
  ForwardMessage2  Message? @relation("ForwardMessage2", fields: [messageIdForward], references: [id])
  messageIdForward Int?
}

model MessageStatus {
  id            Int      @id @default(autoincrement())
  Message       Message? @relation(fields: [lastMessageId], references: [id])
  lastMessageId Int?
  User          User?    @relation(fields: [userId], references: [id])
  userId        Int?
  Chat          Chat?    @relation(fields: [chatId], references: [id])
  chatId        Int?
}
