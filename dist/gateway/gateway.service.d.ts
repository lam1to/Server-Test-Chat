import { UpdateGatewayDto } from './dto/update-gateway.dto';
import { Server } from 'socket.io';
import { JoinDto } from './dto/join.dto';
import { PrismaService } from 'src/prisma.service';
import { MessageService } from 'src/message/message.service';
import { CreateChatDto } from 'src/chat/dto/createChat.dto';
import { ChatService } from 'src/chat/chat.service';
import { MessageUpdateDto } from 'src/message/dto/messageUpdateDto.dto';
import { MessageDeleteDto } from 'src/message/dto/messageDelete.dto';
import { CreateBlockUserDto } from 'src/block-user/dto/create-block-user.dto';
import { BlockUserService } from 'src/block-user/block-user.service';
import { LeftChatDto } from 'src/left-chat/dto/LeftChat.dto';
import { LeftChatService } from 'src/left-chat/left-chat.service';
import { MessageDto } from 'src/message/dto/messageDto.dto';
import { messageWithImgCreateDto } from 'src/message/dto/messageCreateWithImg.dto';
import { ContentImgService } from 'src/content-img/content-img.service';
import { StorageService } from 'src/storage/storage.service';
import { messageUpdateWithImgDto } from 'src/message/dto/messageUpdateWithImg.dto';
import { UserService } from 'src/user/user.service';
export declare class GatewayService {
    private chat;
    private blockUser;
    private leftChat;
    private prisma;
    private messageS;
    private contentImg;
    private storage;
    private user;
    constructor(chat: ChatService, blockUser: BlockUserService, leftChat: LeftChatService, prisma: PrismaService, messageS: MessageService, contentImg: ContentImgService, storage: StorageService, user: UserService);
    create(messageCreateDto: MessageDto, server: Server): Promise<string>;
    deleteMessage(dto: MessageDeleteDto, server: Server): Promise<void>;
    createWithImg(dto: messageWithImgCreateDto, server: Server): Promise<void>;
    editMessageWithImg(dto: messageUpdateWithImgDto, server: Server): Promise<void>;
    createChat(dto: CreateChatDto, server: Server): Promise<void>;
    deleteChat(id: string, server: Server): Promise<void>;
    updateMessage(dto: MessageUpdateDto, server: Server): Promise<void>;
    createBlockUser(dto: CreateBlockUserDto, server: Server): Promise<void>;
    removeBlockUser(dto: CreateBlockUserDto, server: Server): Promise<void>;
    createLeftChat(dto: LeftChatDto, server: Server): Promise<void>;
    removeLeftChat(dto: LeftChatDto, server: Server): Promise<void>;
    loadingImg(server: Server): Promise<void>;
    findAll(): string;
    findOne(id: number): string;
    joinRoom(room: JoinDto, server: Server): Promise<void>;
    update(id: number, updateGatewayDto: UpdateGatewayDto): string;
    remove(id: number): string;
}
